import axios from 'axios';
import cities from '../data/processed_city.list';
import * as cnsts from '../data/constants';
import "../node_modules/@fortawesome/fontawesome-free/css/all.css";

static function closeAllLists(el) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    const inp = document.getElementById('city');
    const items = document.getElementsByClassName("autocomplete-items");
    for (let i = 0; i < items.length; i++) {
        if (el != items[i] && el != inp) {
          items[i].parentNode.removeChild(items[i]);
        }
    }
}

class {
    onCreate() {
        this.state = cnsts.INITIAL_STATE;
        this.currentFocus = -1;

        this.fillState = this.fillState.bind(this);
        this.showMessage = this.showMessage.bind(this);
        this.resetMessage = this.resetMessage.bind(this);

        this.handleInput = this.handleInput.bind(this);
        this.handleKeyDown = this.handleKeyDown.bind(this);
        this.addActive = this.addActive.bind(this);
        this.removeActive = this.removeActive.bind(this);
    }
    onMount() {
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }
    fillState(data) {
        this.state.main = data.weather[0].main;
        this.state.pressure = (data.main.pressure * 0.75006375541921).toFixed(0) + ' mmHg';
        this.state.temp = (data.main.temp < 0 ? "" : "+") + (data.main.temp).toFixed(1) + ' °C';
        this.state.humidity = data.main.humidity + '%';
        this.state.sunrise = this.processTimeString(data.sys.sunrise);
        this.state.sunset = this.processTimeString(data.sys.sunset);
        this.state.icon = data.weather[0].icon;
        this.state.wind_deg = data.wind.deg + 'deg';
        this.state.wind_speed = data.wind.speed + ' m/s';
        this.state.description = data.weather[0].description[0].toUpperCase() + data.weather[0].description.substr(1);
        this.state.status = cnsts.STATUS.DISPLAY;
    }
    processTimeString(date) {
        return new Date(date * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
    }
    getData(e) {
        e.preventDefault();
        const cityInfo = document.getElementById('city').value.replace(', ', ',');
        if (cityInfo !== '') {
            if (this.state.message !== '') {
                this.resetMessage();
            }
            axios
                .get('https://api.openweathermap.org/data/2.5/weather?q=' + cityInfo + '&units=metric&APPID=96c2fc4713551153e7966978b449861a')
                .then(response => {
                    console.log(response.data);
                    this.fillState(response.data);
                })
                .catch(error => {
                    console.log(error);
                    if (error.response.status === 404) {
                        this.showMessage("City isn't found");
                    }
                });
        } else {
            this.showMessage("Enter the name of the city");
        }
    }
    showMessage(message) {
        this.state.message = message;
    }
    resetMessage() {
        this.state.message = '';
    }
    handleInput(e) {
        const inp = document.getElementById('city');
        const val = inp.value;

        closeAllLists();
        if (!val) {
            return false;
        }

        this.currentFocus = -1;
        /*create a DIV element that will contain the items (values):*/
        let a = document.createElement("DIV");
        a.setAttribute("id", "city_autocomplete-list");
        a.setAttribute("class", "autocomplete-items");
        /*append the DIV element as a child of the autocomplete container:*/
        inp.parentNode.appendChild(a);
        const citiesCount = Math.min(cities.length, cnsts.MAX_DISPLAYED_CITIES);
        let fittedCount = 0;
        for (let i = 0; i < cities.length; i++) {
            /*check if the item starts with the same letters as the text field value:*/
            let countryStr = cities[i].name + ', ' + cities[i].country;
            if (countryStr.substr(0, val.length) == val) {
                /*create a DIV element for each matching element:*/
                let b = document.createElement("DIV");
                /*make the matching letters bold:*/
                b.innerHTML = "<strong>" + countryStr.substr(0, val.length) + "</strong>";
                b.innerHTML += countryStr.substr(val.length);
                /*insert a input field that will hold the current array item's value:*/
                b.innerHTML += "<input type='hidden' value='" + countryStr + "'>";
                /*execute a function when someone clicks on the item value (DIV element):*/
                b.addEventListener("click", function(e) {
                    /*insert the value for the autocomplete text field:*/
                    inp.value = this.getElementsByTagName("input")[0].value;
                    closeAllLists();
                });
                a.appendChild(b);
                fittedCount++;
            }
            if (fittedCount > citiesCount) {
                break;
            }
        }
    }
    handleKeyDown(e) {
        let el = document.getElementById("city_autocomplete-list");
        if (el) {
            el = el.getElementsByTagName("div");
        }
        if (e.keyCode == 40) {
            /*If the arrow DOWN key is pressed,
            increase the currentFocus variable:*/
            this.currentFocus++;
            this.addActive(el);
        } else if (e.keyCode == 38) {
            /*If the arrow UP key is pressed,
            decrease the currentFocus variable:*/
            this.currentFocus--;
            this.addActive(el);
        } else if (e.keyCode == 13) {
            if (this.currentFocus > -1) {
                /*and simulate a click on the "active" item:*/
                if (el) {
                    el[this.currentFocus].click();
                }
            }
        }
    }
    addActive(el) {
        if (!el) {
            return false;
        }

        this.removeActive(el);
        if (this.currentFocus >= el.length) {
            this.currentFocus = 0;
        }
        if (this.currentFocus < 0) {
            this.currentFocus = (el.length - 1);
        }

        el[this.currentFocus].classList.add("autocomplete-active");
    }
    removeActive(el) {
        for (var i = 0; i < el.length; i++) {
          el[i].classList.remove("autocomplete-active");
        }
     }
}


<div>
    <div#control>
        <div.column>
            <form.row no-update on-submit('getData')>
                <div.autocomplete>
                    <input#city list="cities" name="city" required title="This field shouldn't be empty"
                        on-input("handleInput")
                        on-keydown("handleKeyDown")
                        autocomplete="off"
                    />
                </div>
                <input#sbmt type="submit" value="Show" >
            </form>
            <if (state.message !== '')>
                <div#message><i.fas.fa-info></i> ${state.message}</div>
            </if>
        </div>
    </div>

    <if (state.status === cnsts.STATUS.DISPLAY)>
        <div#weather>
            <div#main>${state.main}</div>
            <div.row.space-between>
                <div.row#temperature><i.fas.fa-thermometer-half></i>&nbsp;${state.temp}</div>
                <img#main-img src="https://openweathermap.org/img/wn/"+state.icon+"@2x.png" title=state.description/>
            </div>
            <div#windBlock.row.space-between>
                <div#wind-speed.row>
                    <i.fas.fa-wind></i>&nbsp;
                    <div>${state.wind_speed}</div>
                </div>
                $ const rot = ": rotate(" + state.wind_deg + ");";
                <div#wind>
                    <div#N>N</div>
                    <div#W>W</div>
                    <div#windDirection><div style="-webkit-transform"+rot+"-ms-transform"+rot+"-o-transform"+rot+"transform"+rot>↑</div></div>
                    <div#E>E</div>
                    <div#S>S</div>
                </div>
            </div>
            <div#addit-info.row.space-between>
                <div.row><img#barometer src="https://image.flaticon.com/icons/svg/106/106462.svg"/>&nbsp;${state.pressure}</div>
                <div.row><i.fas.fa-tint></i>&nbsp;${state.humidity}</div>
            </div>
            <div.row#daylight-hours>
                <div>Daylight hours: from <code>${state.sunrise}</code> to <code>${state.sunset}</code></div>
            </div>
        </div>
    </if>
</div>