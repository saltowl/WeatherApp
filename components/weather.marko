import axios from 'axios';
import cities from '../data/processed_city.list';
import * as cnsts from '../data/constants';
import "../node_modules/@fortawesome/fontawesome-free/css/all.css";

class {
    onCreate() {
        this.state = cnsts.INITIAL_STATE;

        this.fillState = this.fillState.bind(this);
        this.showMessage = this.showMessage.bind(this);
        this.resetMessage = this.resetMessage.bind(this);
    }
    fillState(data) {
        this.state.main = data.weather[0].main;
        this.state.pressure = (data.main.pressure * 0.75006375541921).toFixed(0) + ' mmHg';
        this.state.temp = (data.main.temp < 0 ? "" : "+") + (data.main.temp).toFixed(1) + ' °C';
        this.state.humidity = data.main.humidity + '%';
        this.state.sunrise = this.processTimeString(data.sys.sunrise);
        this.state.sunset = this.processTimeString(data.sys.sunset);
        this.state.icon = data.weather[0].icon;
        this.state.wind_deg = data.wind.deg + 'deg';
        this.state.wind_speed = data.wind.speed + ' m/s';
        this.state.description = data.weather[0].description[0].toUpperCase() + data.weather[0].description.substr(1);
        this.state.status = cnsts.STATUS.DISPLAY;
    }
    processTimeString(date) {
        return new Date(date * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
    }
    getData() {
        const cityInfo = document.getElementById('city').value.replace(', ', ',');
        if (cityInfo !== '') {
            this.resetMessage();
            axios
                .get('https://api.openweathermap.org/data/2.5/weather?q=' + cityInfo + '&units=metric&APPID=96c2fc4713551153e7966978b449861a')
                .then(response => {
                    console.log(response.data);
                    this.fillState(response.data);
                })
                .catch(error => {
                    console.log(error);
                    if (error.response.status === 404) {
                        this.showMessage("City isn't found");
                    }
                });
        } else {
            this.showMessage("Enter the name of the city");
        }
    }
    showMessage(message) {
        this.state.message = message;
    }
    resetMessage() {
        this.state.message = '';
    }
}


<div>
    <div#control>
        <div.column>
            <div.row no-update>
                <button on-click('getData')>Show</button>
            </div>
            <if (state.message !== '')>
                <div#message><i.fal.fa-info></i> ${state.message}</div>
            </if>
        </div>
    </div>

    <if (state.status === cnsts.STATUS.DISPLAY)>
        <div#weather>
            <div#main>${state.main}</div>
            <div.row.space-between>
                <div.row#temperature><i.fas.fa-thermometer-half></i>&nbsp;${state.temp}</div>
                <img#main-img src="https://openweathermap.org/img/wn/"+state.icon+"@2x.png" title=state.description/>
            </div>
            <div#windBlock.row.space-between>
                <div#wind-speed.row>
                    <i.fas.fa-wind></i>&nbsp;
                    <div>${state.wind_speed}</div>
                </div>
                $ const rot = ": rotate(" + state.wind_deg + ");";
                <div#wind>
                    <div#N>N</div>
                    <div#W>W</div>
                    <div#windDirection><div style="-webkit-transform"+rot+"-ms-transform"+rot+"-o-transform"+rot+"transform"+rot>↑</div></div>
                    <div#E>E</div>
                    <div#S>S</div>
                </div>
            </div>
            <div#addit-info.row.space-between>
                <div.row><img#barometer src="https://image.flaticon.com/icons/svg/106/106462.svg"/>&nbsp;${state.pressure}</div>
                <div.row><i.fas.fa-tint></i>&nbsp;${state.humidity}</div>
            </div>
            <div.row#daylight-hours>
                <div>Daylight hours: from <code>${state.sunrise}</code> to <code>${state.sunset}</code></div>
            </div>
        </div>
    </if>
</div>